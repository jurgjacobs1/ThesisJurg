# -*- coding: utf-8 -*-
"""tweet_sentiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vPFdoCBJVjRno4jedvXKsqeFpOYz3UDf

# **Install packages and load libraries**
"""

!pip install --upgrade pip
!pip install sentencepiece
!pip install transformers
!pip install numpy
!pip install pandas
!pip install scipy

from transformers import AutoTokenizer, AutoModel, TFAutoModel, AutoConfig
from transformers import AutoModelForSequenceClassification
from transformers import TFAutoModelForSequenceClassification
from transformers import pipeline
import numpy as np
from scipy.spatial.distance import cosine
from collections import defaultdict 
import urllib
from scipy.special import softmax
from sklearn.metrics import classification_report
import pandas as pd
from tqdm.notebook import tqdm

"""# **Specify the sentiment analysis model: XLM-T**"""

MODEL =  f"cardiffnlp/twitter-xlm-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
config = AutoConfig.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)

"""# **Sentiment Analysis for every country**

**For every country the tweets will be imported and the sentiment score on all tweets will be retrieved.**

## Brazil

**Importing the Brazil datafile. These tweets are encoded by ISO-8859-1.**
"""

df_brazil = pd.read_csv("tweets_brazil.csv", encoding = "ISO-8859-1")

df_brazil.head()

tweet = "E quem eu menos esperava me dando suporte, atravessou a cidade pra me ajudar e ainda foi obrigado a assistir #365days ! CoraÃ§Ã£o desse homem Ã© tÃ£o lindo batendo debaixo de tanta armadura!"

"""**Defining a new function named polarity_scores_roberta. This function uses the tokenizer to encode the text and attach sentiment scores to it.**"""

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

"""**For every row in the Brazil datafile, try to retrieve the sentiment scores from the XLM-sentiment model of roBERTa**"""

res = {}
for i, row in tqdm(df_brazil.iterrows(), total=len(df_brazil)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

"""**Writing 'res' to a pandas data frame and merge the data frame with the original dataframe, such that every tweet has a sentiment score on negative, neutral, and positive.**"""

sentiment_br = pd.DataFrame(res).T
sentiment_br = sentiment_br.reset_index().rename(columns={'index' : 'text'})
sentiment_br = sentiment_br.merge(df_brazil, how='left')

"""**Writing the data frame to a csv file separated by a comma.**"""

sentiment_br.to_csv("tweetsentiment_br.csv", sep=",")

"""## **France**"""

df_france = pd.read_csv("tweets_france.csv", encoding = "ISO-8859-1")

df_france.head()

tweet = "Donc le mec se met une branlee, fume des clopes et le lendemain dГ©bute l'ascencion du K2 рџ�±рџ�±рџ�± @nimsdai #14peaksnothingisimpossible @NetflixFR"

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

res_fr = {}
for i, row in tqdm(df_france.iterrows(), total=len(df_france)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_fr[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_fr = pd.DataFrame(res_fr).T
sentiment_fr = sentiment_fr.reset_index().rename(columns={'index' : 'text'})
sentiment_fr = sentiment_fr.merge(df_france, how='left')

sentiment_fr.to_csv("tweetsentiment_fr.csv", sep=",")

"""## **Japan**"""

df_japan = pd.read_csv("tweets_japan.csv", encoding = "ISO-8859-1")

df_japan.head()

tweet = "普通という”奇跡 #hello #365daysThisDay"

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

res_jp = {}
for i, row in tqdm(df_japan.iterrows(), total=len(df_japan)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_jp[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_jp = pd.DataFrame(res_jp).T
sentiment_jp = sentiment_jp.reset_index().rename(columns={'index' : 'text'})
sentiment_jp = sentiment_jp.merge(df_japan, how='left')

sentiment_jp.to_csv("tweetsentiment_jp.csv", sep=",")

"""## **Mexico**"""

df_mexico = pd.read_csv("tweets_mexico.csv", encoding = "ISO-8859-1")

df_mexico.head()

tweet = "Cuando pienso en #Eminem siempre me acuerdo de esta escena рџ¤Ј #13goingon30 https://t.co/dScMigC0bz"

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

res_mx = {}
for i, row in tqdm(df_mexico.iterrows(), total=len(df_mexico)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_mx[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_mx = pd.DataFrame(res_mx).T
sentiment_mx = sentiment_mx.reset_index().rename(columns={'index' : 'text'})
sentiment_mx = sentiment_mx.merge(df_mexico, how='left')

sentiment_mx.to_csv("tweetsentiment_mx.csv", sep=",")

"""## **United Kingdom**"""

df_uk = pd.read_csv("tweets_uk.csv", encoding = "ISO-8859-1")

df_uk.head()

tweet = "Watching the film #13minutes on Netflix for 31 minutes so far and literally nothing has happened"

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

res_uk = {}
for i, row in tqdm(df_uk.iterrows(), total=len(df_uk)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_uk[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_uk = pd.DataFrame(res_uk).T
sentiment_uk = sentiment_uk.reset_index().rename(columns={'index' : 'text'})
sentiment_uk = sentiment_uk.merge(df_uk, how='left')

sentiment_uk.to_csv("tweetsentiment_uk.csv", sep=",")

"""## **United States**"""

df_us = pd.read_csv("tweets_us.csv", encoding = "ISO-8859-1")

df_us.head()

# Splitting up the data, otherwise the kernel stops.
df_us1 = df_us.iloc[0:50000]

df_us2 = df_us.iloc[50000:100000]

df_us3 = df_us.iloc[100000:150000]

df_us4 = df_us.iloc[150000:172964]

tweet = "I was so fascinated by #14peaksnothingisimpossible that Iâve watched 5 other mountain climbing documentaries in the past 2 days ð­ ITS SO COOL OMG"

def polarity_scores_roberta(tweet):
  encoded_text = tokenizer(tweet, return_tensors = 'pt')
  output = model(**encoded_text)
  scores = output[0][0].detach().numpy()
  scores = softmax(scores)
  scores_dict = {
      'negative' : scores[0],
      'neutral'  : scores[1],
      'positive' : scores[2]
  }
  return scores_dict

"""### **First part**"""

res_us1 = {}
for i, row in tqdm(df_us1.iterrows(), total=len(df_us1)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_us1[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_us1 = pd.DataFrame(res_us1).T
sentiment_us1 = sentiment_us1.reset_index().rename(columns={'index' : 'text'})
sentiment_us1 = sentiment_us1.merge(df_us, how='left')

sentiment_us1.to_csv("tweetsentiment_us1.csv", sep=",")

"""### **Second part**"""

res_us2 = {}
for i, row in tqdm(df_us2.iterrows(), total=len(df_us2)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_us2[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_us2 = pd.DataFrame(res_us2).T
sentiment_us2 = sentiment_us2.reset_index().rename(columns={'index' : 'text'})
sentiment_us2 = sentiment_us2.merge(df_us, how='left')

sentiment_us2.to_csv("tweetsentiment_us2.csv", sep=",")

"""### **Third part**"""

res_us3 = {}
for i, row in tqdm(df_us3.iterrows(), total=len(df_us3)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_us3[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_us3 = pd.DataFrame(res_us3).T
sentiment_us3 = sentiment_us3.reset_index().rename(columns={'index' : 'text'})
sentiment_us3 = sentiment_us3.merge(df_us, how='left')

sentiment_us3.to_csv("tweetsentiment_us3.csv", sep=",")

"""### **Fourth part**"""

res_us4 = {}
for i, row in tqdm(df_us4.iterrows(), total=len(df_us4)):
    try:
        text = row['text']
        roberta_result = polarity_scores_roberta(text)
        res_us4[text] = roberta_result
    except RuntimeError:
        print(f'Broke for tweet {text}')

sentiment_us4 = pd.DataFrame(res_us4).T
sentiment_us4 = sentiment_us4.reset_index().rename(columns={'index' : 'text'})
sentiment_us4 = sentiment_us4.merge(df_us, how='left')

sentiment_us4.to_csv("tweetsentiment_us4.csv", sep=",")

"""# **Download all the files from sentiment analysis**"""

from google.colab import files
files.download("tweetsentiment_br.csv")
files.download("tweetsentiment_fr.csv")
files.download("tweetsentiment_jp.csv")
files.download("tweetsentiment_mx.csv")
files.download("tweetsentiment_uk.csv")
files.download("tweetsentiment_us1.csv")
files.download("tweetsentiment_us2.csv")
files.download("tweetsentiment_us3.csv")
files.download("tweetsentiment_us4.csv")